{"version":3,"sources":["Assets/components/pieces/pieces.tsx","Assets/components/tile/tile.tsx","Assets/components/chessboard/chessboard.tsx","Assets/components/fen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Type","Team","Tile","number","image","row","col","className","style","backgroundImage","selectedPice","ChessBoard","board","pieces","fen","pieceTypeFromSymbol","KING","QUEEN","ROOK","BISHOP","KNIGHT","PAWN","fenBoard","split","char","isNaN","parseInt","pieceTeam","toUpperCase","WHITE","BLACK","pieceType","toLowerCase","push","position","team","type","Fen","i","length","j","undefined","piece","console","log","String","onMouseDown","event","element","target","classList","contains","x","clientX","y","clientY","left","top","grabPiece","onMouseMove","movePiece","onMouseUp","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f00a450c.chunk.js","sourcesContent":["/*\r\nexport interface Piece{\r\n    nome: string;\r\n    x: number;\r\n    y: number;\r\n    image: string;\r\n\r\n    setX(x:number): void;\r\n    setY(y:number): void;\r\n\r\n    getX(): number;\r\n    getY(): number;\r\n\r\n}*/\r\n\r\nexport interface Position{\r\n    row: number;\r\n    col: number;\r\n}\r\n\r\nexport enum Type{\r\n    KING,\r\n    QUEEN,\r\n    ROOK,\r\n    BISHOP,\r\n    KNIGHT,\r\n    PAWN,\r\n}\r\n\r\nexport enum Team{\r\n    WHITE,\r\n    BLACK,\r\n}\r\n\r\nexport interface Pieces{\r\n    image: string;\r\n    position: Position;\r\n    type: Type;\r\n    team: Team;\r\n}\r\n","import \"./tile.css\"\r\n\r\ninterface Props{\r\n    image?: string\r\n    number: number\r\n    row: string\r\n    col: string\r\n}\r\n\r\nexport default function Tile({number, image, row, col}: Props){\r\n    if(number % 2 === 0){\r\n        return (\r\n            <div className=\"tile dark-tile\">\r\n                <div className=\"row light\">{row}</div>\r\n                {image && <div className=\"piece\" style={{backgroundImage: `url(${image})`}}/>}\r\n                <div className=\"col light\">{col}</div>\r\n            </div>\r\n        );\r\n    }else{\r\n        return (\r\n            <div className=\"tile light-tile\">\r\n                <div className=\"row dark\">{row}</div>\r\n                {image && <div className=\"piece\" style={{backgroundImage: `url(${image})`}}/>}\r\n                <div className=\"col dark\">{col}</div>\r\n            </div>\r\n        );\r\n    }\r\n}","import \"./chessboard.css\";\nimport Tile from \"../tile/tile\";\nimport {Fen} from \"../fen\";\n\nconst col = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\nconst row =  [1, 2, 3, 4, 5, 6, 7, 8];\n\nlet selectedPice: HTMLElement | null = null;\n\n\nfunction grabPiece(event: React.MouseEvent){\n    const element = event.target as HTMLElement;\n\n    if(element.classList.contains(\"piece\")){\n        console.log(event)\n\n        let x = event.clientX - 50;\n        let y = event.clientY - 50;\n\n        element.style.position = \"absolute\";\n        element.style.left = `${x}px`;\n        element.style.top = `${y}px`;\n\n        selectedPice = element;\n\n    }\n}\n\nfunction movePiece(event: React.MouseEvent){\n\n    if(selectedPice){\n\n        let x = event.clientX - 50;\n        let y = event.clientY - 50;\n\n        selectedPice.style.position = \"absolute\";\n        selectedPice.style.left = `${x}px`;\n        selectedPice.style.top = `${y}px`;\n    }\n}\n\nfunction dropPiece(event: React.MouseEvent){\n    if(selectedPice){\n        selectedPice = null;\n    }\n}\n\nexport default function ChessBoard (){\n    let board = [];\n    const pieces = Fen(\"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\")\n\n    for(let i = 0 ; i < col.length; i++){\n        for(let j = 0; j < row.length; j++){\n            let image = undefined;\n            const number = i + j;\n\n            for(let piece of pieces){\n                if(i === piece.position.row && j === piece.position.col){\n                    image = piece.image;\n                    console.log(piece.position);\n                }\n            }\n\n            board.push(<Tile number={number} image={image} row={j === 0 ? String(row[row.length - 1 - i] ) : \"\"} col={i === 7 ? col[j] : \"\"}/>);\n        }\n    }\n\n\n    return (\n        <div\n            onMouseDown={event => grabPiece(event)}\n            onMouseMove={event => movePiece(event)}\n            onMouseUp={event => dropPiece(event)}\n            id=\"chessboard\" >\n            {board}\n        </div>\n    );\n}","import {Pieces, Team, Type} from \"./pieces/pieces\";\r\n\r\nexport function Fen(fen:string){\r\n    const pieceTypeFromSymbol = {\r\n        'k': Type.KING,\r\n        'q': Type.QUEEN,\r\n        'r': Type.ROOK,\r\n        'b': Type.BISHOP,\r\n        'K': Type.KNIGHT,\r\n        'p': Type.PAWN,\r\n    };\r\n\r\n    const pieces: Pieces[] = [];\r\n    const fenBoard: string = fen.split(' ')[0];\r\n    let col = 0 ,row = 7;\r\n\r\n    for(let char of fenBoard){\r\n        if(char === '/'){\r\n            col = 0;\r\n            row--;\r\n        }else{\r\n            if(!isNaN(parseInt(char))){\r\n                col += parseInt(char);\r\n            }else{\r\n                let pieceTeam = char === char.toUpperCase() ? Team.WHITE : Team.BLACK;\r\n                let pieceType = pieceTypeFromSymbol['p'];\r\n                char = char.toLowerCase();\r\n                pieces.push({\r\n                    image: \"chess-react/images/\" + (pieceTeam === 0   ? \"b\"+char : \"w\"+char) + \".png\",\r\n                    position:{row:row,col:col},\r\n                    team:pieceTeam,\r\n                    type:pieceType\r\n                });\r\n                col++;\r\n            }\r\n        }\r\n    }\r\n\r\n    return pieces;\r\n\r\n}","import './App.css';\nimport ChessBoard from \"./Assets/components/chessboard/chessboard\";\n\nfunction App() {\n  return (\n      <div id=\"app\">\n          <ChessBoard/>\n      </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}